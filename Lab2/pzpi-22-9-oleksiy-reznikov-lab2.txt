
Міністерство освіти і науки України Харківський національний університет радіоелектроніки


Кафедра програмної інженерії





Звіт
з лабораторної роботи №2
з дисципліни "Архітектура програмного забезпечення" з теми: "Мобільний застосунок"







Виконав	Перевірив
ст. гр. ПЗПІ-22-9	Дашенков Д. С.
Олексiй Резнiков














2025
 
1	ІСТОРІЯ ЗМІН

Таблиця 1 – Історія змін

№	Дата	Версія звіту	Опис змін та виправлень
1	25.05.2025	0.1	Створено звіт

2	ЗАВДАННЯ

Тема: Мобільний застосунок
У межах цієї лабораторної роботи необхідно створити мобільний додаток для однієї з популярних мобільних платформ. Додаток має бути частиною системи та взаємодіяти з нею. Для розробки можна використовувати технології, рекомендовані викладачем, зокрема Kotlin для Android або Swift для iOS.

3	ОПИС ВИКОНАНОЇ РОБОТИ

3.1	Опис прийнятих інженерних рішень


Під час розробки мобільного застосунку electric-monitor-mobile було прийнято низку ключових технічних та архітектурних рішень, що забезпечили стабільність, модульність та потенціал для масштабування системи.
1.	Вибір мови Kotlin: Застосунок розроблено мовою Kotlin, що є офіційною та рекомендованою мовою для Android-розробки. Kotlin забезпечує лаконічний, безпечний та виразний синтаксис, а також повну сумісність з Java, що сприяє написанню чистого коду та зменшенню кількості типових помилок.
2.	Фрагментна структура UI: Користувацький інтерфейс реалізовано на основі фрагментів. Це дозволяє структурувати UI на модульні, незалежні компоненти, такі як LoginFragment, DevicesFragment, ProfileFragment, DeviceDetailFragment, AddDeviceFragment та інші (видно у пакеті ui.fragments). Такий підхід підвищує гнучкість навігації, спрощує керування життєвим циклом UI та забезпечує легкість підтримки та повторного використання елементів інтерфейсу.
3.	Взаємодія з бекендом через Retrofit: Для комунікації з серверною частиною використано сучасну бібліотеку Retrofit. Вона дозволяє ефективно виконувати HTTP-запити та спрощує визначення API-інтерфейсів (як демонструє пакет data.api з AuthApi, DeviceApi, PowerDataApi, AlertApi). Retrofit автоматично обробляє дані у форматі JSON та підтримує асинхронні операції, що є критично важливим для мережевої взаємодії. Наявність NetworkModule.kt вказує на централізовану конфігурацію мережевого клієнта.
4.	Багатошарова архітектура та розділення відповідальностей: Структура проєкту організована згідно з принципами багатошаровості, розділяючи різні аспекти функціональності на окремі пакети:
	Шар даних (data): Містить логіку, пов'язану з отриманням та обробкою даних. Включає API-інтерфейси (api), моделі даних (models), конфігурацію мережі (network) та репозиторії (repositories), які абстрагують джерела даних (AuthRepository, DeviceRepository).
	Шар UI (ui): Відповідає за відображення даних та взаємодію з користувачем, включаючи фрагменти (fragments) та адаптери (adapters).
	Шар ViewModel (viewmodels): Містить ViewModel класи (AuthViewModel, DeviceViewModel), які готують дані для UI, обробляють бізнес-логіку, незалежну від конкретного UI-елементу, та забезпечують стійкість даних при зміні конфігурації.
Таке розділення робить код більш організованим, легшим для тестування та підтримки.
5.	RESTful API для ключових функцій: Взаємодія з бекендом здійснюється через REST API, що підтримує ключові функції застосунку. На основі структури API (data.api), реалізовано запити для:
	Авторизації та реєстрації користувачів (AuthApi, AuthRepository).
	Керування та отримання інформації про пристрої (DeviceApi, DeviceRepository).
	Отримання даних моніторингу споживання енергії (PowerDataApi.kt).
	Обробки сповіщень/алертів (AlertApi.kt).
Це забезпечує надійну взаємодію з сервером для моніторингу та керування пристроями.
6.	Безпека: Авторизація користувачів реалізована з використанням JWT-токенів для забезпечення безпечного доступу до ресурсів. Проводиться валідація вхідних даних користувача на клієнтській стороні, що допомагає запобігти некоректним запитам.
7.	Масштабованість: Архітектура проєкту, з її чітким розподілом на шари (data, ui, viewmodels), використанням репозиторіїв та модульною структурою UI на фрагментах, спроєктована з урахуванням можливості легкого додавання нових функцій, типів пристроїв або розширення функціоналу моніторингу в майбутньому.
Застосовані технічні та архітектурні рішення створили міцну основу для electric-monitor-mobile, забезпечивши чистоту коду, високу продуктивність та зручність для подальшого розвитку проєкту.


3.2	Опис взаємодії компонентів мобільного застосунку одне з одним та з іншими елементами системи.

Мобільний застосунок electric-monitor-mobile побудований на модульній архітектурі, де кожен фрагмент виконує окрему логічну функцію. Взаємодія між внутрішніми компонентами та із зовнішніми сервісами реалізована через чітко визначені механізми, що забезпечують стабільність та масштабованість.
Взаємодія між компонентами застосунку:
	MainActivity: Виступає як головна "оболонка" або контейнер, у якому відображаються різні фрагменти, що складають екранний інтерфейс застосунку.
	Фрагменти: Основні екрани застосунку реалізовані як фрагменти (LoginFragment, DevicesFragment, ProfileFragment, DeviceDetailFragment, AddDeviceFragment тощо, як видно у пакеті ui.fragments). Фрагменти зазвичай не взаємодіють напряму один з одним, а навігація між ними здійснюється за допомогою навігаційних дій, ймовірно, через Android Navigation Component або подібний механізм.
	Передача даних між екранами: Для передачі необхідних даних (наприклад, ідентифікаторів пристроїв) між фрагментами використовуються стандартні механізми Android, такі як аргументи фрагментів (Bundle).
	Адаптери: У пакеті ui.adapters знаходяться адаптери (AddDevicePagerAdapter, DevicesAdapter), які відповідають за відображення списків даних (наприклад, списку пристроїв) у відповідних компонентах UI (RecyclerView, ViewPager).
Взаємодія з backend-сервером:
	Мережева бібліотека: Для комунікації з серверною частиною використовується сучасна бібліотека Retrofit у поєднанні з Kotlin Coroutines, що забезпечує ефективне та асинхронне виконання мережевих запитів.
	API-інтерфейси: Усі запити до серверного API описані у відповідних інтерфейсах (таких як AlertApi, AuthApi, DeviceApi, PowerDataApi), згрупованих у пакеті data.api. Конфігурація мережевого клієнта, ймовірно, централізована у data.network.NetworkModule.kt.
	Моделі даних: Дані, що надходять із сервера у форматі JSON, автоматично мапляться у відповідні Kotlin класи-моделі (наприклад, Alert, ApiResponse, AuthModels, Device, PowerDataResponse, User) з пакету data.models. Ці моделі потім використовуються для відображення даних в UI або для внутрішньої логіки.
	Асинхронність: Усі мережеві операції є асинхронними, що запобігає блокуванню головного потоку UI та забезпечує плавну роботу застосунку під час обміну даними.
	Репозиторії: Шар репозиторіїв (data.repositories з AuthRepository, DeviceRepository) абстрагує джерела даних, надаючи єдиний інтерфейс для отримання даних, який може працювати як з мережею, так і потенційно з локальним кешем (хоча локальний кеш не видно на скріншоті).
Взаємодія з електричними пристроями (через сервер):
	Мобільний застосунок взаємодіє з електричними пристроями опосередковано – через backend-сервер.
	Застосунок може надсилати команди або запити на сервер для керування пристроями (наприклад, додавання нового пристрою через відповідні UI-екрани та API-запити).
	Застосунок отримує дані від сервера про стан пристроїв, показники споживання електроенергії (PowerDataApi) та важливі події чи несправності (алерти через AlertApi).
	Таким чином, сервер виступає посередником, обробляючи комунікацію з самими електричними пристроями та надаючи мобільному застосунку необхідні дані та функціональність для моніторингу та базового керування.
Загалом, мобільний застосунок electric-monitor-mobile реалізує чисту та структуровану взаємодію між внутрішніми компонентами (фрагментами, адаптерами, моделями, ViewModel) та бекенд-сервером, що забезпечує ефективний моніторинг та керування підключеними електричними пристроями, а також робить архітектуру зрозумілою та масштабованою.
.
 
3.3	UML діаграма прецедентів (Use Case Diagram)

 
Рисунок 3.1 – UML діаграма прецедентів


3.4	UML діаграма компонентів (Component Diagram)

 
Рисунок 3.2 – UML діаграма компонентів

3.5	ER-модель даних (Entity–Relationship Model) мобільної платформи.

 
Рисунок 3.3 –ER-діаграма даних

3.6	UML діаграма діяльності (Activity Diagram);


 

Рисунок 3.4 – UML діаграма діяльності


4	ВИСНОВКИ

У ході виконання лабораторної роботи було розроблено повноцінний мобільний застосунок electric-monitor-mobile мовою Kotlin для платформи Android. Застосунок реалізує функціонал авторизації користувачів, відображення профілю, перегляду списку підключених пристроїв, моніторингу показників споживання електроенергії та роботи зі сповіщеннями (алерти). Було прийнято низку інженерних рішень, зокрема використано архітектуру на основі фрагментів, бібліотеку Retrofit у поєднанні з Kotlin Coroutines для ефективної асинхронної взаємодії з бекенд-сервером. Бекенд-частина побудована на Node.js та працює з базою даних PostgreSQL через Prisma ORM. Мобільна частина реалізує взаємодію з пристроями моніторингу/керування (аналогічно до IoT-пристроїв) опосередковано через сервер. Структура проєкту є масштабованою, логічно поділеною на компоненти (згідно з принципами багатошарової архітектури: data, ui, viewmodels) та відповідає вимогам сучасної клієнт-серверної системи моніторингу та керування електричними пристроями.
Посилання на GitHub: 
