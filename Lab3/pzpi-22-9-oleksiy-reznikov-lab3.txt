
Міністерство освіти і науки України Харківський національний університет радіоелектроніки


Кафедра програмної інженерії





Звіт
з лабораторної роботи №3
з дисципліни "Архітектура програмного забезпечення" з теми: " Веб застосунок "







Виконав	Перевірив
ст. гр. ПЗПІ-22-9	Дашенков Д. С.
Олексiй Резнiков














2025
 
1	ІСТОРІЯ ЗМІН

Таблиця 1 – Історія змін

№	Дата	Версія звіту	Опис змін та виправлень
1	29.05.2025	0.1	Створено звіт

2	ЗАВДАННЯ

Тема: Веб застосунок
У межах цієї лабораторної роботи необхідно створити веб-застосунок для браузерних платформ. Додаток має бути частиною системи та взаємодіяти з нею через API. Для розробки можна використовувати сучасні веб-технології, зокрема React.js, Vue.js або Angular для frontend розробки, з підтримкою адаптивного дизайну для різних розмірів екранів та пристроїв.
Веб-застосунок повинен забезпечувати повнофункціональний користувацький інтерфейс з можливістю роботи як на десктопних комп'ютерах, так і на мобільних пристроях через веб-браузер.


3	ОПИС ВИКОНАНОЇ РОБОТИ

Використані технології
Для реалізації клієнтської частини системи використано:
•	React 18.2.0 - основний UI фреймворк
•	React Router DOM 6.20.1 - маршрутизація
•	Axios 1.6.2 - HTTP клієнт для API запитів
•	Framer Motion 10.16.16 - анімації та переходи
•	Lucide React 0.294.0 - набір іконок
•	Recharts 2.8.0 - графіки та діаграми
•	Tailwind CSS - стилізація компонентів
•	Vite - інструмент збірки та розробки
Архітектура системи

 
Рисунок 1 - Загальна структура додатка

 
Рисунок 2 - Архітектура компонентів


1.	Прийняті інженерні рішення
1. Архітектурні рішення
Context API для управління станом:
•	AuthProvider - централізоване управління аутентифікацією
•	Глобальний доступ до інформації про користувача
•	Автоматична перевірка токенів та перенаправлення
Маршрутизація на основі ролей:
const ProtectedRoute = ({ children, requireAdmin = false }) => {
  const { user, loading, isAdmin } = useAuth();
  
  if (!user) return <Navigate to="/login" replace />;
  if (requireAdmin && !isAdmin()) return <Navigate to="/dashboard" replace />;
  
  return children;
};
Кастомні хуки для логіки:
•	useAuth - управління аутентифікацією
•	useDevices - робота з пристроями
•	useDeviceData - отримання даних пристроїв
2. API взаємодія
Централізований HTTP клієнт:
const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: { 'Content-Type': 'application/json' }
});
Автоматична обробка токенів:
•	Інтерсептор запитів додає Bearer токен
•	Інтерсептор відповідей обробляє 401 помилки
•	Автоматичне перенаправлення на логін при неавторизованому доступі
3. Компонентна архітектура
Переваги використаного підходу:
•	Модульність та багаторазове використання
•	Чітке розділення відповідальностей
•	Легке тестування та підтримка
Взаємодія компонентів

 
Рисунок 3 - Схема взаємодії користувацької частини

 
Рисунок 4 - Схема взаємодії адміністративної частини

2.	Користувацький інтерфейс
1. Дизайн система
Колірна схема:
•	Primary Dark: #222831 - основний темний фон
•	Secondary Dark: #393E46 - вторинний фон
•	Accent Cyan: #00ADB5 - акцентний колір
•	Light Gray: #EEEEEE - текст
Компоненти UI:
•	Кастомні кнопки з варіантами стилів
•	Карточки з градієнтними ефектами
•	Анімовані завантажувачі
•	Модальні вікна з плавними переходами
2. Адаптивність
Responsive дизайн:
.text-responsive {
  font-size: clamp(1rem, 2.5vw, 1.25rem);
}

.title-responsive {
  font-size: clamp(1.5rem, 4vw, 2.5rem);
}
Grid система:
•	Гнучкі сітки для різних розмірів екранів
•	Адаптивні таблиці з горизонтальним скролом
•	Мобільна навігація
3. Анімації та ефекти
Framer Motion анімації:
•	Плавні переходи між сторінками
•	Анімації появи елементів
•	Інтерактивні ефекти при наведенні
<motion.div
  initial={{ opacity: 0, y: 20 }}
  animate={{ opacity: 1, y: 0 }}
  exit={{ opacity: 0, y: -20 }}
  transition={{ duration: 0.3 }}
>
3.	Адміністрування системи

 
Рисунок 5 - Структура адміністративної панелі

2. Управління користувачами
Функціональність UsersTable:
•	Пошук та фільтрація користувачів
•	Сортування по різним полям
•	Пагінація для великих наборів даних
•	CRUD операції над користувачами
Можливості адміністратора:
•	Зміна ролей користувачів
•	Активація/деактивація акаунтів
•	Редагування персональних даних
•	Видалення користувачів (крім власного акаунта)
3. Моніторинг системи
SystemOverview компонент:
•	Статистичні картки з ключовими метриками
•	Графіки активності за 24 години
•	Діаграма розподілу типів пристроїв
•	Моніторинг здоров'я системи
Реалізація дашборду:
const StatCard = ({ title, value, change, icon: Icon, color = "cyan" }) => {
  return (
    <Card className={`bg-gradient-to-r ${colorClasses[color]} text-white`}>
      <CardContent className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <div className="p-3 bg-white bg-opacity-20 rounded-lg">
            <Icon className="w-8 h-8" />
          </div>
          <div>
            <p className="text-sm opacity-90">{title}</p>
            <p className="text-3xl font-bold">{value.toLocaleString()}</p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};
4. Система дозволів
Рольова модель:
•	user - звичайний користувач
•	admin - адміністратор з обмеженими правами
•	super_admin - суперадміністратор з повними правами
Контроль доступу:
const canEditRole = currentUser?.role === 'super_admin' || 
  (currentUser?.role === 'admin' && user?.role !== 'super_admin');
5. Обробка помилок та стану
Глобальна обробка помилок:
•	Централізовані повідомлення про помилки
•	Автоматичне відновлення після втрати з'єднання
•	Індикатори завантаження для всіх асинхронних операцій
Стан системи:
•	Реальний час оновлення статусу з'єднання
•	Автоматичне оновлення даних кожну хвилину
•	Візуальні індикатори стану системи
Така архітектура забезпечує масштабованість, підтримуваність та гарний користувацький досвід як для звичайних користувачів, так і для адміністраторів системи.
4.	UML діаграма прецедентів (Use Case Diagram)
 
 
Рисунок 6 - UML діаграма прецедентів

Детальний опис прецедентів
1. Актори системи
Актор	Опис
Гість	Неавторизований користувач, може тільки реєструватися та входити в систему
Користувач	Авторизований користувач з базовими правами доступу до власних пристроїв
Адміністратор	Користувач з розширеними правами для управління іншими користувачами та системою
Суперадміністратор	Користувач з найвищими правами, може виконувати всі операції в системі
Система	Автоматизовані процеси системи (верифікація, моніторинг)
2. Основні групи прецедентів
Аутентифікація та авторизація
•	UC1: Реєстрація - Створення нового облікового запису
•	UC2: Вхід в систему - Автентифікація користувача
•	UC3: Вихід з системи - Завершення сесії користувача
•	UC4: Верифікація токену - Автоматична перевірка дійсності сесії
Управління пристроями
•	UC5-UC13 - Повний цикл управління пристроями: від створення до контролю та спільного використання
Моніторинг та аналітика
•	UC14-UC18 - Перегляд даних споживання, статистики та генерація звітів
Адміністративні функції
•	UC19-UC24 - Управління користувачами (тільки для адмінів)
•	UC25-UC30 - Системне адміністрування (для суперадмінів)
3. Матриця доступу
Прецедент	Гість	Користувач	Адмін	Суперадмін
Реєстрація	✅	❌	❌	❌
Вхід в систему	✅	✅	✅	✅
Управління пристроями	❌	✅	✅	✅
Перегляд даних	❌	✅	✅	✅
Управління користувачами	❌	❌	✅	✅
Видалення користувачів	❌	❌	❌	✅
Системні налаштування	❌	❌	❌	✅

5.	UML діаграма компонент (Component Diagram)
 
Рисунок 7 - UML діаграма компонент

Опис основних компонентів
Компонент	Відповідальність
App.jsx	Головний компонент, маршрутизація, провайдери
Authentication	Компоненти входу та реєстрації
User Interface	Користувацький дашборд та керування пристроями
Administration	Адміністративна панель та управління системою
Common UI	Переваживані UI компоненти
Business Logic	Кастомні хуки для бізнес-логіки
Services	API клієнт та конфігурація

6.	UML діаграма прецедентів (Use Case Diagram)

 
Рисунок 8 - UML діаграма прецедентів
Package Diagram
Показує організацію коду в пакети та їх залежності:
•	components/ - UI компоненти, згруповані за функціональністю
•	hooks/ - кастомні React хуки для бізнес-логіки
•	services/ - API клієнти та сервіси
•	utils/ - допоміжні утиліти та константи

7.	UML діаграма діяльності - Процес управління пристроями (Activity Diagram)
 
Рисунок 9 - UML діаграма діяльності

Повну картинку можна переглянути: https://www.mermaidchart.com/app/projects/6807e75a-2e59-4e53-9b00-a67e1e65b85b/diagrams/26d916bd-f032-462b-b271-2ea82a1c1550/version/v0.1/edit 

Activity Diagram
Демонструє повний процес управління пристроями:
1.	Аутентифікація - перевірка авторизації користувача
2.	Завантаження даних - отримання списку пристроїв
3.	CRUD операції - створення, редагування, видалення пристроїв
4.	Керування пристроями - включення/вимкнення, встановлення лімітів
5.	Моніторинг - перегляд даних споживання та статистики

Висновки
1.	Загальна оцінка проекту
Розроблена клієнтська частина системи моніторингу електроспоживання демонструє сучасний підхід до створення веб-додатків з використанням React екосистеми. Проект має чітку архітектуру з розділенням відповідальностей між компонентами, що забезпечує його масштабованість та підтримуваність.
2.	Технічні переваги
Використання Context API для управління станом аутентифікації є обґрунтованим рішенням для додатка такого масштабу. Централізований API клієнт з автоматичною обробкою токенів та помилок значно спрощує взаємодію з бекенд сервісами. Реалізація рольової системи доступу забезпечує належний рівень безпеки для різних типів користувачів.
3.	Користувацький досвід
Інтерфейс побудовано з урахуванням принципів сучасного UX/UI дизайну. Використання Framer Motion для анімацій та Tailwind CSS для стилізації створює привабливий та інтуїтивно зрозумілий інтерфейс. Адаптивний дизайн забезпечує коректну роботу на різних пристроях.
4.	Архітектурні рішення
Модульна структура компонентів з виділенням переваживаних UI елементів та кастомних хуків для бізнес-логіки відповідає кращим практикам React розробки. Система маршрутизації з захищеними роутами ефективно керує доступом до різних частин додатка.
5.	Адміністративна функціональність
Реалізована адміністративна панель надає необхідні інструменти для управління системою та користувачами. Система дозволів з різними рівнями доступу (користувач, адміністратор, суперадміністратор) забезпечує гнучке управління правами доступу.
6.	Потенціал для розвитку
Проект має солідну основу для подальшого розширення функціональності. Поточна архітектура дозволяє легко додавати нові компоненти та функції без значних змін в існуючому коді. Використання TypeScript могло б покращити типобезпеку, але для проекту такого масштабу JavaScript є достатнім.
7.	Підсумок
Створений фронтенд додаток повністю відповідає поставленим вимогам та демонструє професійний рівень розробки. Система готова до продуктивного використання та має потенціал для подальшого розвитку як повноцінна платформа моніторингу електроспоживання.


